-- This is a big use for testing the different types.
-- Take a look at example.usc for a minimal example.

return bd.system
{
   imports = {
      "stdtypes",
      "ptrig",
      "lfds_cyclic",
      "ubxros",
      "mqueue",
      "cconst",
      "ramp_int32",
      "rand_int32",
      "rand_double",
      "kdl_types",
   },

   blocks = {
      { name="rosbridge1", type="ubxros" },
      { name="ramp1", type="ubx/ramp_int32" },
      { name="rand1", type="ubx/rand_int32" },
      { name="rand_double1", type="ubx/rand_double" },
      { name="vector_const1", type="ubx/cconst" },
      { name="frame_const1", type="ubx/cconst" },
      { name="frame_const2", type="ubx/cconst" },
      { name="ptrig1", type="ubx/ptrig" },
      { name="vector_sub_out", type="ubx/mqueue" },
   },

   configurations = {
      {
	 name="rosbridge1",
	 config = {
	    connections = {
	       { topic = "ramp_int32", dir='P', ubx_type="int32_t" },
	       { topic = "rand_int32", dir='P', ubx_type="int32_t" },
	       { topic = "rand_double", dir='P', ubx_type="double" },
	       { topic = "listen_int", dir='S', ubx_type="int32_t" },
	       { topic = "vector_pub", dir='P', ubx_type="struct kdl_vector" },
	       { topic = "vector_sub", dir='S', ubx_type="struct kdl_vector" },
	       { topic = "frame_pub", dir='P', ubx_type="struct kdl_frame" },
	       { topic = "pose_pub", dir='P', ros_type="geometry_msgs/Pose", ubx_type="struct kdl_frame" },
	    }
	 }
      },
      {
	 name="ramp1",
	 config = { slope=1, start=0 }
      },
      {
	 name="vector_const1",
	 config = {
	    type_name = "struct kdl_vector",
	    value = { x=11.1, y=22.2, z=33.3 },
	 }
      },
      {
	 name="frame_const1",
	 config = {
	    type_name = "struct kdl_frame",
	    value = {
	       p = { x = 11.1, y=22.2, z=33.3 },
	       M = { data = { 1, 0, 0,
			      0, 1, 0,
			      0, 0, 1 } }
	    }
	 }
      },
      {
	 name="frame_const2",
	 config = {
	    type_name = "struct kdl_frame",
	    value = {
	       p = { x = 888, y=999, z=666 },
	       M = { data = { 1, 0, 0,
			      0, 1, 0,
			      0, 0, 1 } }
	    }
	 }
      }      ,

      { name="ptrig1", config = {
	   period = {sec=0, usec=1000000 },
	   tstats_mode=1,
	   tstats_profile_path="/tmp",
	   chain0={
	      { b="#ramp1", num_steps=1 },
	      { b="#rand1", num_steps=1 },
	      { b="#rand_double1", num_steps=1 },
	      { b="#vector_const1", num_steps=1 },
	      { b="#frame_const1", num_steps=1 },
	      { b="#frame_const2", num_steps=1 },
	      { b="#rosbridge1", num_steps=1 }
	   } }
      },
      {
	 name="vector_sub_out",
	 config = {
	    mq_id = "vector_sub_out",
	    type_name = "struct kdl_vector",
	    data_len = 1,
	    buffer_len = 4,
	 }
      },
   },

   connections = {
      { src="ramp1.out", tgt="rosbridge1.ramp_int32" },
      { src="rand1.out", tgt="rosbridge1.rand_int32" },
      { src="rand_double1.out", tgt="rosbridge1.rand_double" },
      { src="vector_const1.out", tgt="rosbridge1.vector_pub" },
      { src="frame_const1.out", tgt="rosbridge1.frame_pub" },
      { src="frame_const2.out", tgt="rosbridge1.pose_pub" },
      { src="rosbridge1.vector_sub", tgt="vector_sub_out" },
   },
}
